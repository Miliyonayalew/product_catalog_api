# Docker-compatible database configuration
default: &default
  adapter: postgresql
  encoding: unicode
  host: <%= ENV.fetch("DB_HOST", "db") %>
  port: <%= ENV.fetch("DB_PORT", 5432) %>
  username: <%= ENV.fetch("DB_USERNAME", "postgres") %>
  password: <%= ENV.fetch("DB_PASSWORD", "password") %>
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>

development:
  <<: *default
  database: product_catalog_api_development

test:
  <<: *default
  database: product_catalog_api_test

production:
  primary:
    <<: *default
    database: <%= ENV.fetch("DATABASE_NAME", "product_catalog_api_production") %>
    username: <%= ENV.fetch("DATABASE_USERNAME", "postgres") %>
    password: <%= ENV.fetch("DATABASE_PASSWORD") %>
  cache:
    <<: *default
    database: <%= ENV.fetch("CACHE_DATABASE_NAME", "product_catalog_api_cache") %>
    username: <%= ENV.fetch("DATABASE_USERNAME", "postgres") %>
    password: <%= ENV.fetch("DATABASE_PASSWORD") %>
    migrations_paths: db/cache_migrate
  queue:
    <<: *default
    database: <%= ENV.fetch("QUEUE_DATABASE_NAME", "product_catalog_api_queue") %>
    username: <%= ENV.fetch("DATABASE_USERNAME", "postgres") %>
    password: <%= ENV.fetch("DATABASE_PASSWORD") %>
    migrations_paths: db/queue_migrate
  cable:
    <<: *default
    database: <%= ENV.fetch("CABLE_DATABASE_NAME", "product_catalog_api_cable") %>
    username: <%= ENV.fetch("DATABASE_USERNAME", "postgres") %>
    password: <%= ENV.fetch("DATABASE_PASSWORD") %>
    migrations_paths: db/cable_migrate